{"version":3,"sources":["components/Dog.js","components/Select.js","components/Image.js","App.js","serviceWorker.js","index.js"],"names":["Dog","props","react_default","a","createElement","className","children","Select","state","breeds","breed","change","event","_this$props","_this","setState","target","value","changeSubbreed","_this$props2","this","fetchDogs","_this2","fetch","then","res","json","result","isLoaded","message","_this$state","length","onChange","data-test","map","subbreed","key","id","Object","keys","thisBreed","Component","Image","image","nextProps","fetchImage","concat","newBreed","url","_this$state2","Fragment","src","alt","onClick","randomize","bind","onKeyDown","role","tabIndex","App","subbreeds","data","push","components_Select","components_Image","components_Dog","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d668d12d.chunk.js","sourcesContent":["import React from 'react'\n\nconst Dog = props => (\n  <div className=\"col-md-4\">{props.children}</div>\n)\n\nexport default Dog\n","import React, { Component } from 'react'\n\nclass Select extends Component {\n  state = {\n    breeds: null,\n    breed: null,\n  }\n\n  componentDidMount() {\n    const { breed } = this.props\n\n    this.setState({\n      breed,\n    })\n\n    if (!breed) {\n      this.fetchDogs()\n    }\n  }\n\n  change = (event) => {\n    const { breeds, change } = this.props\n\n    this.setState({\n      breed: event.target.value,\n      breeds,\n    })\n\n    change(event.target.value)\n  }\n\n  changeSubbreed = (event) => {\n    const { change, breed } = this.props\n    this.setState({\n      breed,\n    })\n\n    change(breed, event.target.value)\n  }\n\n  fetchDogs() {\n    const { change } = this.props\n    const url = 'https://dog.ceo/api/breeds/list/all'\n\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            breeds: result.message,\n          })\n\n          change(result.message)\n        },\n      )\n  }\n\n  render() {\n    const { breeds, breed } = this.state\n    if (breed && this.props.breeds.length) {\n      return (\n        <select onChange={ this.changeSubbreed } data-test=\"subbreeds\">\n          <option>Select subbreed</option>\n          { this.props.breeds.map(subbreed => (\n            <option key={ subbreed } value={ subbreed }>\n              { subbreed }\n            </option> ),\n          ) }\n        </select>\n      )\n    }\n\n    if (breeds) {\n      return (\n        <select onChange={ this.change } id=\"breeds\" data-test=\"breeds\">\n          <option>Select breed</option>\n          { Object.keys(breeds).map(thisBreed => (\n            <option key={ thisBreed } value={ thisBreed }>\n              { thisBreed }\n            </option>\n          )) }\n        </select>\n      )\n    }\n\n    return 'Loading...'\n  }\n}\n\nexport default Select\n","import React, { Component } from 'react'\n\nclass Image extends Component {\n  state = {\n    breed: null,\n    subbreed: null,\n    image: null,\n  }\n\n  componentDidMount() {\n    const { breed, subbreed } = this.props\n\n    this.setState({\n      breed: breed,\n      subbreed: subbreed,\n    })\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      breed: nextProps.breed,\n      subbreed: nextProps.subbreed,\n    })\n\n    if (nextProps.subbreed) {\n      this.fetchImage(`${ nextProps.breed }/${ nextProps.subbreed }`)\n    } else if (nextProps.breed) {\n      this.fetchImage(nextProps.breed)\n    }\n  }\n\n  fetchImage(newBreed) {\n    const url = `https://dog.ceo/api/breed/${ newBreed }/images/random`\n    let image\n\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          image = result.message\n\n          this.setState({\n            image: result.message,\n          })\n        },\n      )\n\n    return image\n  }\n\n  randomize() {\n    const { breed, subbreed } = this.state\n\n    if (subbreed) {\n      this.fetchImage(`${ breed }/${ subbreed }`)\n    } else if (breed) {\n      this.fetchImage(breed)\n    }\n  }\n\n  render() {\n    const { image, breed } = this.state\n\n    if (breed !== null) {\n      return (\n        <>\n          <img key=\"image\" className=\"dog\" data-test=\"dog\" src={ image } alt=\"dog\" />\n          <i className=\"fas fa-sync\" onClick={ this.randomize.bind(this) } onKeyDown={ this.randomize.bind(this) }role=\"button\" tabIndex=\"-3\" />\n        </>\n      )\n    }\n\n    return ('')\n  }\n}\n\nexport default Image\n","import React, { Component } from 'react'\nimport Dog from './components/Dog'\nimport Select from './components/Select'\nimport Image from './components/Image'\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    isLoaded: false,\n    breeds: null,\n    breed: null,\n    subbreeds: [],\n    subbreed: null,\n  }\n\n  change = (data, breed) => {\n    const { breeds } = this.state\n\n    // We've selected a single breed and now getting subbreeds if they exist\n    // or we have a subbreed\n    if (data && typeof data === 'string') {\n      this.setState({\n        breed: data,\n        subbreeds: breeds[ data ],\n        subbreed: breed,\n      })\n    } else if (breed) {\n      this.setState({\n        subbreed: breed,\n      })\n    } else {\n      this.setState({\n        breeds: data,\n        isLoaded: true,\n      })\n    }\n  }\n\n  render() {\n    const {\n      breeds, breed, isLoaded, subbreeds, subbreed,\n    } = this.state\n    const children = []\n    let image\n\n    if (!isLoaded) {\n      children.push(<Select key=\"empty\" change={ this.change } />)\n    } else {\n      children.push(<Select key=\"breeds\" breed={ breed } breeds={ breeds } change={ this.change } />)\n\n      if (subbreeds.length > 0) {\n        children.push(<Select key=\"subbreeds\" breed={ breed } breeds={ subbreeds } change={ this.change } />)\n      }\n\n      image = <Image key=\"image\" breed={ breed } subbreed={ subbreed } src=\"\" />\n    }\n\n    return (\n      <>\n        <Dog>\n          { children }\n        </Dog>\n        { image }\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}